// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TournamentStatus {
  FINISHED
  NOW
  FUTURE
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  address   String
  password  String
  email     String
  createdAt DateTime @default(now())
  tournaments Tournament[] @relation("MyRelationTable")
  firstMatches Match[]     @relation("FirstPlayer")
  secondMatches Match[]    @relation("SecondPlayer")
  winnedMatches Match[] @relation("MatchWinner")

}

model Tournament {
  id        Int              @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime         @default(now())
  status    TournamentStatus @default(FUTURE)
  users User[] @relation("MyRelationTable")
  matches Match[] @relation("MatchInTournament")

}

model Match {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  first_player_id Int
  second_player_id Int
  winner_id Int
  tournamentId Int
  tournament Tournament? @relation("MatchInTournament", fields: [tournamentId], references: [id])
  first_player    User?    @relation("FirstPlayer", fields: [first_player_id], references: [id])
  second_player   User?    @relation("SecondPlayer", fields: [second_player_id], references: [id])
  winner           User?    @relation("MatchWinner", fields: [winner_id], references: [id]) // Отношение с победителем
  first_score Int? 
  second_score Int?

}
